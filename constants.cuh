#ifndef CONSTANTS_H
#define CONSTANTS_H

constexpr int NUM_STATES = 2;
constexpr int NUM_ARMS = 3;
//constexpr int NUM_ARMS = 2;
constexpr float Q_00 = 1.0f;
constexpr float Q_01 = 0.0f;
constexpr float Q_10 = 0.0f;
constexpr float Q_11 = 0.0f;
constexpr int K = int(100);
// NUM_KS*NUM_SIMS should be less than 2^32-1(4e9)
constexpr int NUM_KS = int(200);
constexpr int NUM_SIMS = int(1e7);
constexpr float MU[NUM_ARMS] = {0.9f, 0.8f, 0.5f};
// constexpr float MU[NUM_ARMS] = { 0.9f, 0.8f };
//constexpr float MU[NUM_ARMS] = { 0.2f, 0.1f };
constexpr int MAX_LEN_PER_EPISODE = int(1e4);
constexpr float BEST_ARM_MU = MU[0];
constexpr float BASELINE = (BEST_ARM_MU * (1 + Q_00 - BEST_ARM_MU * Q_00 + BEST_ARM_MU * Q_10 - Q_10)) / (Q_00 + BEST_ARM_MU * (-2 * Q_00 + Q_10 + Q_01 + Q_11 * Q_00 - Q_10 * Q_01) + BEST_ARM_MU * BEST_ARM_MU * (Q_00 + Q_11 - Q_10 - Q_01 - Q_11 * Q_00 + Q_10 * Q_01));
constexpr float ALPHA = 0.5f; // forgetting factor
constexpr float PARA_C = 1000.0f;
constexpr int SIZE_OF_VALUE_FUNCTION = 1000;
// constexpr float BASELINE_CONT = 50.6485489f; // Only for BEST_ARM_MU=0.9, c=1000, ALPHA=0.5 
// constexpr float BASELINE_CONT = 35.535131610068504f; // Only for BEST_ARM_MU=0.9, c=100, ALPHA=0.5
// constexpr float BASELINE_CONT = 50.6485f; // More accurately, 50.648548926482455f; Only for BEST_ARM_MU=0.9, c=1000, ALPHA=0.5 
//constexpr float BASELINE_CONT = 10.05807f; // Only for BEST_ARM_MU=0.9, ALPHA=0.5, square
constexpr float BASELINE_CONT = 1.000424607700268f; // Only for BEST_ARM_MU=0.2, c=1000, ALPHA=0.5
constexpr float Q_UCB_H = (-BEST_ARM_MU * Q_00 + Q_00 - Q_10 + BEST_ARM_MU * Q_10 + 1) / ((1 - BEST_ARM_MU * (1 - Q_11)) * (-BEST_ARM_MU * Q_00 + BEST_ARM_MU + Q_00) - (1 - BEST_ARM_MU) * (1 - Q_10) * BEST_ARM_MU * (1 - Q_01));


// The parameters for SVI-SSP algorithm
constexpr float C_MIN = 1.0f;
constexpr float BETA = C_MIN / (2.0f * BASELINE * BASELINE * (NUM_STATES + 1) * NUM_ARMS * K * NUM_KS);


#endif // !CONSTANTS_H
